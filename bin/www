#!/usr/bin/env node

/**
 * Set environment config
 */

require('colors');
require('../prepenv');
const config = require('json-cfg').trunk;

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('test-response:server');
const http = require('http');

/**
 * Get port from environment and store in Express.
 */

const { port: serverPort = '3000', host: serverHost = 'localhost' } = config.conf.server;
app.set('port', serverPort);
app.set('host', serverHost);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = (typeof serverPort === 'string') ? `Pipe ${serverPort}` : `Port ${serverPort}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(`${bind} is already in use`);
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    const addr = server.address();
    const bind = (typeof addr === 'string') ? `pipe ${addr}` : `port ${addr.port}`;
    debug(`Listening on ${bind}`);
    console.log(`Listening on ${bind}`);
}

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(serverPort, serverHost);
server.on('error', onError);
server.on('listening', onListening);
